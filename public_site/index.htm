<!DOCTYPE html>

<head>
  <link rel="shortcut icon" href="#" />
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <script src="https://d3js.org/d3.v7.min.js"></script>
  <script src="https://d3js.org/topojson.v3.min.js"></script>
  <link href="style.css" rel="stylesheet">
  <title>Consumer Visualization</title>


</head>

<body>
  <svg id="sales" height=300 width=500></svg>
  <svg id="rent" height=300 width=500></svg>
  
  <h1>Discover Most Suitable Property in <b>Pittsburg, PA</b></h1>

  <div class = "container"> 
       <!-- information about the house !-->
        <div class="infobox">
          <div class="price">
              <p class="info"><span id="salesamount"></span> <Span class="for"> FOR SALE ¬∑ </span><span id="rentamount"></span> <span class="for">FOR RENT</span> </p>
            </div>
            <p class="info2"><span id="address"></span></p>

                <hr>
          <p>üõè <span id="bedroom"></span>üõÅ <span id="bathroom"></span>üö™ <span id="roomnum"></span></p>
          <p class="info">‚óºÔ∏è lot <span id="lotsize"></span> ‚óºÔ∏è finished <span id="finishedsize"></span></p>
          <p class="info">üèó Built in <span id="year"></span></p>
        </div>
  <div class="flex">
    <svg id="main" height=700 width=900></svg>
    <div>
      <div class="formDiv">
        <form id="form">
          <div class="form-field">
            <h3>Category</h3>
            <div class="checkbox">
              <input type="checkbox" id="single" name="category" value="SingleFamily">
              <label for=SingleFamily">Single</label>
            </div>
            <div class="checkbox">
              <input type="checkbox" id="multiple" name="category" value="MultiFamily2To4">
              <label for=MultiFamily2To4">Multiple</label>
            </div>
            <div class="checkbox">
              <input type="checkbox" id="townhouse" name="category" value="Townhouse">
              <label for=Townhouse">Townhouse</label>
            </div>
            <div class="checkbox">
              <input type="checkbox" id="condo" name="category" value="Condominium">
              <label for=Condominium">Condominium</label>
            </div>
          </div>
          <div class="form-field">
            <h3>Rooms</h3>
            <p>Bedroom</p>
            <input type="radio" id="bed0" name="bedroom" value="0"><label for=bed0">0</label>
            <input type="radio" id="bed1" name="bedroom" value="1"><label for=bed1">1</label>
            <input type="radio" id="bed2" name="bedroom" value="2"><label for=bed2">2</label>
            <input type="radio" id="bed3" name="bedroom" value="3"><label for=bed3">3</label>
            <input type="radio" id="bed4" name="bedroom" value="4"><label for=bed4">4</label>
            <input type="radio" id="bed5" name="bedroom" value="5"><label for=bed5">5+</label>
            <p>Bathroom</p>
            <input type="radio" id="bath1" name="bathroom" value="1"><label for=bath1">1</label>
            <input type="radio" id="bath2" name="bathroom" value="2"><label for=bath2">2</label>
            <input type="radio" id="bath3" name="bathroom" value="3"><label for=bath3">3</label>
            <input type="radio" id="bath4" name="bathroom" value="4"><label for=bath4">4</label>
            <input type="radio" id="bath5" name="bathroom" value="5"><label for=bath5">5</label>
            <p>Total Room</p>
            <div class="range">
              <input type="text" id="minRoom" name="minRoom" placeholder="Min Room">
              <input type="text" id="maxRoom" name="maxRoom" placeholder="Max Room">
            </div>
          </div>
          <div class="form-field">
            <h3>Price Range</h3>
            <div class="checkbox">
              <input type="radio" id="sales" name="type" value="sales">
              <label for=sales">For Sale</label>
            </div>
            <div class="checkbox">
              <input type="radio" id="rent" name="type" value="rent">
              <label for="rent">For Rent</label>
            </div>
            <div class="range">
              <input type="text" id="minPrice" name="minPrice" placeholder="Min Price">
              <input type="text" id="maxPrice" name="maxPrice" placeholder="Max Price">
            </div>
          </div>
          <div class="form-button">
            <input type="button" id="button" value="Apply Filter">
            <input type="button" id="reset-button" value="Reset Filter">
          </div>
          <div class="form-result">
            <ul id="top-house"></ul>
          </div>
        </form>
      </div>


    </div>
    

  </div>
</div>
</body>

<script>
  const map = d3.select("#main")
  const margins = { t: 20, r: 30, b: 20, l: 30 }
  const mapWidth = map.attr("width") - margins.l - margins.r
  const mapHeight = map.attr("height") - margins.t - margins.b
  const mainMap = map.append("g")
    .attr("transform", `translate(${margins.l},${margins.t})`)

  let drawMap = async function () {
    let data = await d3.csv("./datasets/zillow_pittsburgh_csv.csv")
    console.log(data);

    let pittcounties = await d3.json("./datasets/pittsburghpaneighborhoods-.json")
    console.log(pittcounties)
    // create Penn map
    let projection = d3.geoMercator().fitSize([mapWidth, mapHeight], pittcounties);
    let path = d3.geoPath().projection(projection);
    let neighbors = mainMap.selectAll("path.county").data(pittcounties.features)
      .join("path")
      .attr("class", "county")
      .attr("d", path)
      .attr("fill", "#efeeea")
      .on("click", clickedOn)

    let button = document.getElementById("button");
    button.addEventListener('click', () => {
      var category = [];
      var checkboxes = document.querySelectorAll('input[name="category"]:checked');
      for (var i = 0; i < checkboxes.length; i++) {
        category.push(checkboxes[i].value)
      }
      var bedroom = document.querySelector('input[name="bedroom"]:checked') ? document.querySelector('input[name="bedroom"]:checked').value : null;
      var bathroom = document.querySelector('input[name="bathroom"]:checked') ? document.querySelector('input[name="bathroom"]:checked').value : null;
      var minRoom = document.getElementById('minRoom').value || null;
      var maxRoom = document.getElementById('maxRoom').value || null;
      var minPrice = document.getElementById('minPrice').value || null;
      var maxPrice = document.getElementById('maxPrice').value || null;
      var type = document.querySelector('input[name="type"]:checked') ? document.querySelector('input[name="type"]:checked').value : null;

      // filter by category
      function filterByCategory(obj) {
        if (category.includes(obj["Property Type"])) {
          return true
        } else {
          return false
        }
      }

      // filter by bedroom
      function filterByBedroom(obj) {
        if ((bedroom < 5 && bedroom == parseInt(obj["Bedrooms"])) || (bedroom == 5 && 5 <= parseInt(obj["Bedrooms"]))) {
          return true
        } else {
          return false
        }
      }

      // filter by bathroom
      function filterByBathroom(obj) {
        if ((bathroom < 5 && bathroom == parseInt(obj["Bathroom"])) || (bathroom == 5 && 5 <= parseInt(obj["Bathroom"]))) {
          return true
        } else {
          return false
        }
      }

      // filter by total room
      function filterByTotalroom(obj) {
        if (minRoom <= parseInt(obj["Total Rooms"]) && parseInt(obj["Total Rooms"]) <= maxRoom) {
          return true
        } else {
          return false
        }
      }

      // filter by price
      function filterByPrice(obj) {
        if (type == "sales") {
          if (minPrice <= parseInt(obj["Sale Amount"]) && parseInt(obj["Sale Amount"]) <= maxPrice) {
            return true
          } else {
            return false
          }
        } else {
          if (minPrice <= parseInt(obj["Rent Amount"]) && parseInt(obj["Rent Amount"]) <= maxPrice) {
            return true
          } else {
            return false
          }
        }
      }

      // re-render house by filtered data
      var newData = data;
      if (category.length > 0) {
        console.log(category)
        newData = newData.filter(filterByCategory);
      }
      if (bedroom) {
        newData = newData.filter(filterByBedroom);
      }
      if (bathroom) {
        newData = newData.filter(filterByBathroom);
      }
      if (minRoom && maxRoom) {
        newData = newData.filter(filterByTotalroom);
      }
      if (minPrice && maxPrice) {
        newData = newData.filter(filterByPrice);
      }
      renderHouse(newData);

      // sort the filtered data
      // priority: Finished size (desc) > Lot size (desc) > ‚ÄúYear built‚Äù (desc)
      function compare(a, b) {
        return b["Finished Size (Sq.Ft.)"].localeCompare(a["Finished Size (Sq.Ft.)"], undefined, { 'numeric': true })
          || b["Lot Size (Sq.Ft.)"].localeCompare(a["Lot Size (Sq.Ft.)"], undefined, { 'numeric': true })
          || b["Year Built"] - a["Year Built"];
      }

      // display top 5 houses
      newData.sort(compare);
      let topFive = newData.slice(0, 5);
      var ul = document.getElementById('top-house');
      ul.innerHTML = "Top 5 House Suggestions:";
      for (let i = 0; i < 5; i++) {
        ul.innerHTML += '<li><p>' + topFive[i]["Street Address"] + '</p></li>';
      }
    });

    let resetButton = document.getElementById("reset-button");
    resetButton.addEventListener('click', () => {
      document.getElementById("form").reset();
    });

    // display info 
    function displayText(address, bedroom, bathroom, roomnum, sales, rent, lotsize, finish, year) {

      document.getElementById("address").innerHTML = address;
      document.getElementById("bedroom").innerHTML = bedroom;
      document.getElementById("bathroom").innerHTML = bathroom;
      document.getElementById("roomnum").innerHTML = roomnum;
      document.getElementById("salesamount").innerHTML = sales;
      document.getElementById("rentamount").innerHTML = rent;
      document.getElementById("lotsize").innerHTML = lotsize;
      document.getElementById("finishedsize").innerHTML = finish;
      document.getElementById("year").innerHTML = year;

    }

    displayText("Click a circle to view details!","","","","","","","","")
    //repeated drawing for zooming
    data.forEach((d, i) => {
      d["coords"] = projection([d['Longitude'], d["Latitude"]]);
    })
    var k = 1;
    let circles = mainMap.selectAll("circle").data(data)
      .join("circle")
      .attr("class", "circle")
      .attr("r", 6 / k)
      .attr('cx', d => d["coords"][0])
      .attr("cy", d => d["coords"][1])
      .attr("fill", "#fd3a5d")
      .attr("opacity", 0.7)
    // zooming interactivity
    var zoom = d3.zoom().scaleExtent([1, 10]).on("zoom", zoomed);
    map.call(zoom);

    function zoomed(event) {
      mainMap.attr("transform", event.transform);
      neighbors.attr("stroke-width", 1 / event.transform.k)
      circles.attr("r", 6 / event.transform.k)
      k = event.transform.k
    };
    //holder variable of what was clicked
    var clicked;
    //clicking on neighborhoods to zoom and clicking on same neighborhood to unzoom
    function clickedOn(event, d) {
      let bounds = path.bounds(d.geometry);
      let widthx = bounds[1][0] - bounds[0][0];
      let widthy = bounds[1][1] - bounds[0][1];
      let x = (bounds[0][0] + bounds[1][0]) / 2;
      let y = (bounds[0][1] + bounds[1][1]) / 2;
      let scale = Math.max(1, Math.min(10, 0.9 / Math.max(widthx / mapWidth, widthy / mapHeight)));
      let translate = [mapWidth / 2 - x * scale, mapHeight / 2 - y * scale];
      if (clicked == this) {
        neighbors.transition().style("fill", null);
        let newTransform = d3.zoomIdentity.translate((mapWidth / 30) - 50, (mapHeight / 30) - 50)
        map.transition().duration(550).call(zoom.transform, newTransform);
        console.log("done")
      } else {
        let newTransform = d3.zoomIdentity
          .translate(translate[0], translate[1])
          .scale(scale);
        neighbors.transition().style("fill", null);
        d3.select(this).transition().style("fill", "#c8c8c8");
        map.transition().duration(550).call(zoom.transform, newTransform);
      }
      clicked = this;
    }

    function renderHouse(data) {
      //House data points
      data.forEach((d, i) => {
        d["coords"] = projection([d['Longitude'], d["Latitude"]]);
      })
      let circles = mainMap.selectAll("circle").data(data)
        .join("circle")
        .attr("class", "circle")
        .attr("r", 6 / k)
        .attr('cx', d => d["coords"][0])
        .attr("cy", d => d["coords"][1])
        .attr("fill", "#58aaca")
        .attr("opacity", 0.7)
        .style("stroke", "white");

      //clicked circle placeholder
      var clickedCircle
      circles.on("click", function (d) {
        mainMap.selectAll("circle").data(data)
          .join("circle")
          .attr("class", "circle")
          .attr("r", 6 / k)
          .attr('cx', d => d["coords"][0])
          .attr("cy", d => d["coords"][1])
          .attr("fill", "#588bca")
          .attr("opacity", 0.7)
          .style("stroke", "white");
        let circle = d3.select(this)
        if (clickedCircle == this) {
          circle.attr("r", circle.attr("r") / 1.5)
            .attr("fill", "#58aaca")
            .style("stroke", "none")
            .attr("opacity", 0.7)
            .style("filter", "none")
            .style("stroke", "white");
          mouseover.style("visibility", "hidden");
          updateMouseout();
        } else {
          console.log(this.cx)
          circle.attr("r", circle.attr("r") * 1.5)
            .attr("fill", "#fd3a5d")
            .style("stroke", "white")
            .attr("opacity", 1)
            .style("filter", "drop-shadow(0px 0px 5px rgba(167, 167, 167))");
          mouseover.style("visibility", "visible");
          updateMouseover(circle.datum());
          clickedCircle = this;
        }
      });


      let mouseover = map.append("g")
        .attr("class", "mouseover")
        .attr("visibility", "hidden")

      function updateMouseover(d) {
        format = d3.format(",");
        dollar = d3.format('$,');
        //address, bedroom, bathroom, roomnum, sales, rent, lotsize, finish, year
        displayText(d["Street Address"], d["Bedrooms"] + " bd.", d["Bathroom"] + " ba.", d["Total Rooms"] + " tot.", dollar((d["Sale Amount"])), dollar(d["Rent Amount"]), format(d["Lot Size (Sq.Ft.)"]) + " ft" + "\u00B2",
          format(d["Finished Size (Sq.Ft.)"]) + " ft" + "\u00B2", d["Year Built"]);
      }

      // mouse out function
      function updateMouseout() {
        displayText("Click a circle to view details!", "", "", "", "", "", "", "", "");
      }
    }

    // render house on the map
    renderHouse(data);

    // ************ Price barchart ************ //

    // 1. set up data 
    var saleAmount = [];
    var rentAmount = [];
    var saleDict = {};
    var rentDict = {};

    data.forEach(d => {
      saleAmount.push(parseInt(d['Sale Amount']));
      rentAmount.push(parseInt(d['Rent Amount']));
    });

    saleAmount.sort((a, b) => a - b);
    rentAmount.sort((a, b) => a - b);

    console.log(rentAmount); // 804 ~ 3810
    console.log(saleAmount); // 38464 ~ 1710414


    // 2. make the dictionary of counts for the price: tick: 20 
    // Sales price 
    saleDict["38464"] = 0, saleDict["122062"] = 0, saleDict["205659"] = 0, saleDict["289256"] = 0, saleDict["372854"] = 0;
    saleDict["456451"] = 0, saleDict["540048"] = 0, saleDict["623646"] = 0, saleDict["707243"] = 0, saleDict["790840"] = 0;
    saleDict["874438"] = 0, saleDict["958035"] = 0, saleDict["1047632"] = 0, saleDict["1137230"] = 0, saleDict["1226827"] = 0;
    saleDict["1316424"] = 0, saleDict["1406022"] = 0, saleDict["1495619"] = 0, saleDict["1585216"] = 0; saleDict["1674814"] = 0;

    for (let i = 0; i < saleAmount.length; i++) {
      if (saleAmount[i] > 1674814) {
        saleDict["1674814"] += 1
      } else if (saleAmount[i] > 1674814) {
        saleDict["1585216"] += 1
      } else if (saleAmount[i] > 1585216) {
        saleDict["1495619"] += 1
      } else if (saleAmount[i] > 1495619) {
        saleDict["1406022"] += 1
      } else if (saleAmount[i] > 1406022) {
        saleDict["1316424"] += 1
      } else if (saleAmount[i] > 1316424) {
        saleDict["1226827"] += 1
      } else if (saleAmount[i] > 1226827) {
        saleDict["1137230"] += 1
      } else if (saleAmount[i] > 1137230) {
        saleDict["1047632"] += 1
      } else if (saleAmount[i] > 1047632) {
        saleDict["874438"] += 1
      } else if (saleAmount[i] > 958035) {
        saleDict["958035"] += 1
      } else if (saleAmount[i] > 874438) {
        saleDict["874438"] += 1
      } else if (saleAmount[i] > 790840) {
        saleDict["790840"] += 1
      } else if (saleAmount[i] > 707243) {
        saleDict["707243"] += 1
      } else if (saleAmount[i] > 623646) {
        saleDict["623646"] += 1
      } else if (saleAmount[i] > 540048) {
        saleDict["540048"] += 1
      } else if (saleAmount[i] > 456451) {
        saleDict["456451"] += 1
      } else if (saleAmount[i] > 372854) {
        saleDict["372854"] += 1
      } else if (saleAmount[i] > 289256) {
        saleDict["289256"] += 1
      } else if (saleAmount[i] > 205659) {
        saleDict["205659"] += 1
      } else if (saleAmount[i] > 122062) {
        saleDict["122062"] += 1
      } else if (saleAmount[i] > 38463) {
        saleDict["38464"] += 1
      }
    }

    // Rent Price
    rentDict["804"] = 0, rentDict["1134"] = 0, rentDict["1464"] = 0, rentDict["1794"] = 0, rentDict["2124"] = 0;
    rentDict["2454"] = 0, rentDict["2784"] = 0, rentDict["3114"] = 0, rentDict["3444"] = 0, rentDict["3774"] = 0;

    for (let i = 0; i < rentAmount.length; i++) {
      if (rentAmount[i] > 3774) {
        rentDict["3774"] += 1
      } else if (rentAmount[i] > 3444) {
        rentDict["3444"] += 1
      } else if (rentAmount[i] > 3114) {
        rentDict["3114"] += 1
      } else if (rentAmount[i] > 2784) {
        rentDict["2784"] += 1
      } else if (rentAmount[i] > 2454) {
        rentDict["2454"] += 1
      } else if (rentAmount[i] > 2124) {
        rentDict["2124"] += 1
      } else if (rentAmount[i] > 1794) {
        rentDict["1794"] += 1
      } else if (rentAmount[i] > 1464) {
        rentDict["1464"] += 1
      } else if (rentAmount[i] > 1134) {
        rentDict["1134"] += 1
      } else if (rentAmount[i] > 804) {
        rentDict["804"] += 1
      }
    }

    // 3. scale the data
    for (let key in saleDict) {
      saleDict[key] += 40;
    }
    for (let key in rentDict) {
      rentDict[key] += 40;
    }

    console.log(saleDict);
    console.log(rentDict)

    // 2. set up the svg for Sales Amount bar Charts

    var svg = d3.select("#sales"),
      margin = { top: 20, right: 20, bottom: 30, left: 40 },
      width = +svg.attr("width") - margin.left - margin.right,
      height = +svg.attr("height") - margin.top - margin.bottom

    g = svg.append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    //  Define the scales for the x and y axes
    let xScale = d3.scaleBand()
      .domain(Object.keys(saleDict))
      .range([0, 350])
      .padding(0);

    let yScale = d3.scaleLinear()
      .domain([0, d3.max(Object.values(saleDict))])
      .range([250, 0]);

    // Create the bars
    svg.selectAll('rect')
      .data(Object.entries(saleDict))
      .enter()
      .append('rect')
      .attr('x', (d) => xScale(d[0]))
      .attr('y', (d) => yScale(d[1]))
      .attr('width', xScale.bandwidth())
      .attr('height', (d) => 250 - yScale(d[1]))
      .attr('fill', 'steelblue');

    // x and y axis labels and titles
    // svg.append('g')
    // .attr('transform', 'translate(0, 250)')
    // .call(d3.axisBottom(xScale));

    // svg.append('g')
    //   .call(d3.axisLeft(yScale));

    svg.append('text')
      .attr('x', 200)
      .attr('y', 20)
      .attr('text-anchor', 'middle')
      .text('Price Range (Sales Amount)');

    var svg2 = d3.select("#rent"),
      margin2 = { top: 20, right: 20, bottom: 30, left: 40 },
      width2 = +svg.attr("width") - margin2.left - margin2.right,
      height2 = +svg.attr("height") - margin2.top - margin2.bottom

    g = svg2.append("g").attr("transform", "translate(" + margin2.left + "," + margin2.top + ")");

    //  Define the scales for the x and y axes
    let xScale2 = d3.scaleBand()
      .domain(Object.keys(rentDict))
      .range([0, 350])
      .padding(0);

    let yScale2 = d3.scaleLinear()
      .domain([0, d3.max(Object.values(rentDict))])
      .range([250, 0]);

    // Create the bars
    svg2.selectAll('rect')
      .data(Object.entries(rentDict))
      .enter()
      .append('rect')
      .attr('x', (d) => xScale2(d[0]))
      .attr('y', (d) => yScale2(d[1]))
      .attr('width', xScale2.bandwidth())
      .attr('height', (d) => 250 - yScale2(d[1]))
      .attr('fill', 'steelblue');

    // x and y axis labels and titles
    // svg.append('g')
    // .attr('transform', 'translate(0, 250)')
    // .call(d3.axisBottom(xScale));

    // svg.append('g')
    //   .call(d3.axisLeft(yScale));

    svg2.append('text')
      .attr('x', 200)
      .attr('y', 20)
      .attr('text-anchor', 'middle')
      .text('Price Range (Rent Amount)');

  }

  drawMap();
</script>


</html>