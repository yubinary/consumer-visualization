<!DOCTYPE html>

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <script src="https://d3js.org/d3.v7.min.js"></script>
  <script src="https://d3js.org/topojson.v3.min.js"></script>
  <link href="style.css" rel="stylesheet">
  <title>Consumer Visualization</title>
</head>

<body>
  <div class="flex">
    <svg id="main" height=900 width=1100></svg>
    <form id="form">
      <div class="form-field">
        <h3>Category</h3>
        <input type="checkbox" id="single" name="category" value="SingleFamily">Single
        <input type="checkbox" id="multiple" name="category" value="MultiFamily2To4">Multiple
        <input type="checkbox" id="townhouse" name="category" value="Townhouse">Townhouse
        <input type="checkbox" id="condo" name="category" value="Condominium">Condominium
      </div>
      <div class="form-field">
        <h3>Rooms</h3>
        <p>Bedroom</p>
        <input type="radio" id="bed1" name="bedroom" value="0">0
        <input type="radio" id="bed1" name="bedroom" value="1">1
        <input type="radio" id="bed2" name="bedroom" value="2">2
        <input type="radio" id="bed3" name="bedroom" value="3">3
        <input type="radio" id="bed4" name="bedroom" value="4">4
        <input type="radio" id="bed5" name="bedroom" value="5">5+
        <p>Bathroom</p>
        <input type="radio" id="bath1" name="bathroom" value="1">1
        <input type="radio" id="bath2" name="bathroom" value="2">2
        <input type="radio" id="bath3" name="bathroom" value="3">3
        <input type="radio" id="bath4" name="bathroom" value="4">4
        <input type="radio" id="bath5" name="bathroom" value="5">5+
        <p>Total Room</p>
        <input type="text" id="minRoom" name="minRoom">
        <input type="text" id="maxRoom" name="maxRoom">
      </div>
      <div class="form-field">
        <h3>Price Range</h3>
        <input type="radio" id="sales" name="type" value="sales">For Sales
        <input type="radio" id="rent" name="type" value="rent">For Rent
        <br />
        <input type="text" id="minPrice" name="minPrice">
        <input type="text" id="maxPrice" name="maxPrice">
      </div>
      <div class="form-field">
        <input type="button" id="button" value="Apply Filter">
      </div>
      <div class="form-result">
        <ul id="top-house"></ul>
      </div>
    </form>
  </div>

    <!-- information about the house !--> 
    <div class="infobox">
      <p> Hover over circles to view details!</p> 
      <p>Address: <span id="address"></span></p>
      <p>Number of bedroom(s): <span id="bedroom"></span></p>
      <p>Number of bathroom(s): <span id="bathroom"></span></p>
      <p>Total number of rooms: <span id="roomnum"></span></p>
      <p>Sales Amount: <span id="salesamount"></span></p>
      <p>Rent Amount: <span id="rentamount"></span></p>
      <p>Lot size: <span id="lotsize"></span></p>
      <p>Finished size: <span id="finishedsize"></span></p>
      <p>Year built: <span id="year"></span></p>
    </div>

</body>

<script>
  const map = d3.select("#main")
  const margins = { t: 20, r: 30, b: 20, l: 30 }
  const mapWidth = map.attr("width") - margins.l - margins.r
  const mapHeight = map.attr("height") - margins.t - margins.b
  const mainMap = map.append("g")
    .attr("transform", `translate(${margins.l},${margins.t})`)

  let drawMap = async function () {
    let data = await d3.csv("./datasets/zillow_pittsburgh_csv.csv")
    console.log(data);

    let pittcounties = await d3.json("./datasets/pittsburghpaneighborhoods-.json")
    console.log(pittcounties)

    let button = document.getElementById("button");
    button.addEventListener('click', () => {
      var category = [];
      var checkboxes = document.querySelectorAll('input[name="category"]:checked');
      for (var i = 0; i < checkboxes.length; i++) {
        category.push(checkboxes[i].value)
      }
      var bedroom = document.querySelector('input[name="bedroom"]:checked') ? document.querySelector('input[name="bedroom"]:checked').value : null;
      var bathroom = document.querySelector('input[name="bathroom"]:checked') ? document.querySelector('input[name="bathroom"]:checked').value : null;
      var minRoom = document.getElementById('minRoom').value || null;
      var maxRoom = document.getElementById('maxRoom').value || null;
      var minPrice = document.getElementById('minPrice').value || null;
      var maxPrice = document.getElementById('maxPrice').value || null;
      var type = document.querySelector('input[name="type"]:checked') ? document.querySelector('input[name="type"]:checked').value : null;

      // filter by category
      function filterByCategory(obj) {
        if (category.includes(obj["Property Type"])) {
          return true
        } else {
          return false
        }
      }

      // filter by bedroom
      function filterByBedroom(obj) {
        if ((bedroom < 5 && bedroom == parseInt(obj["Bedrooms"])) || (bedroom == 5 && 5 <= parseInt(obj["Bedrooms"]))) {
          return true
        } else {
          return false
        }
      }

      // filter by bathroom
      function filterByBathroom(obj) {
        if ((bathroom < 5 && bathroom == parseInt(obj["Bathroom"])) || (bathroom == 5 && 5 <= parseInt(obj["Bathroom"]))) {
          return true
        } else {
          return false
        }
      }

      // filter by total room
      function filterByTotalroom(obj) {
        if (minRoom <= parseInt(obj["Total Rooms"]) && parseInt(obj["Total Rooms"]) <= maxRoom) {
          return true
        } else {
          return false
        }
      }

      // filter by price
      function filterByPrice(obj) {
        if (type == "sales") {
          if (minPrice <= parseInt(obj["Sale Amount"]) && parseInt(obj["Sale Amount"]) <= maxPrice) {
            return true
          } else {
            return false
          }
        } else {
          if (minPrice <= parseInt(obj["Rent Amount"]) && parseInt(obj["Rent Amount"]) <= maxPrice) {
            return true
          } else {
            return false
          }
        }
      }

      // re-render house by filtered data
      var newData = data;
      if (category.length > 0) {
        console.log(category)
        newData = newData.filter(filterByCategory);
      }
      if (bedroom) {
        newData = newData.filter(filterByBedroom);
      }
      if (bathroom) {
        newData = newData.filter(filterByBathroom);
      }
      if (minRoom && maxRoom) {
        newData = newData.filter(filterByTotalroom);
      }
      if (minPrice && maxPrice) {
        newData = newData.filter(filterByPrice);
      }
      renderHouse(newData);

      // sort the filtered data
      // priority: Finished size (desc) > Lot size (desc) > “Year built” (desc)
      function compare(a, b) {
        return b["Finished Size (Sq.Ft.)"].localeCompare(a["Finished Size (Sq.Ft.)"], undefined, { 'numeric': true })
          || b["Lot Size (Sq.Ft.)"].localeCompare(a["Lot Size (Sq.Ft.)"], undefined, { 'numeric': true })
          || b["Year Built"] - a["Year Built"];
      }

      // display top 5 houses
      newData.sort(compare);
      let topFive = newData.slice(0, 5);
      var ul = document.getElementById('top-house');
      ul.innerHTML = "";
      for (let i = 0; i < 5; i++) {
        ul.innerHTML += '<li><p>' + topFive[i]["Street Address"] + '</p></li>';
      }
    });

    // create Penn map
    let projection = d3.geoMercator().fitSize([mapWidth, mapHeight], pittcounties);
    let path = d3.geoPath().projection(projection);
    mainMap.selectAll("path.county").data(pittcounties.features)
      .join("path")
      .attr("class", "county")
      .attr("d", path)

    // display info 
    function displayText(address, bedroom, bathroom, roomnum, sales, rent, lotsize, finish, year) {

      document.getElementById("address").innerHTML = address;
      document.getElementById("bedroom").innerHTML = bedroom;
      document.getElementById("bathroom").innerHTML = bathroom;
      document.getElementById("roomnum").innerHTML = roomnum;
      document.getElementById("salesamount").innerHTML = sales;
      document.getElementById("rentamount").innerHTML = rent;
      document.getElementById("lotsize").innerHTML = lotsize;
      document.getElementById("finishedsize").innerHTML = finish;
      document.getElementById("year").innerHTML = year;

    }

    function renderHouse(data) {
      // zooming interactivity
      var zoom = d3.zoom().scaleExtent([1, 10]).on("zoom", zoomed);
      map.call(zoom);
      var k = 1;
      function zoomed(event) {
        mainMap.attr("transform", event.transform);
        circles.attr("r", 5 / event.transform.k)
        k = event.transform.k
      };
      //House data points
      data.forEach((d, i) => {
        d["coords"] = projection([d['Longitude'], d["Latitude"]]);
      })
      let circles = mainMap.selectAll("circle").data(data)
        .join("circle")
        .attr("class", "circle")
        .attr("r", 5 / k)
        .attr('cx', d => d["coords"][0])
        .attr("cy", d => d["coords"][1])
        .attr("fill", "blue")

      circles.on("mouseover", function (d) {
        let circle = d3.select(this)
        console.log(this.cx)
        circle.attr("r", circle.attr("r") * 1.5)
          .attr("fill", "green")
        mouseover.style("visibility", "visible");
        updateMouseover(circle.datum());
      });

      circles.on("mouseout", function (d) {
        let circle = d3.select(this)
        circle.attr("r", circle.attr("r") / 1.5)
          .attr("fill", "blue")
        mouseover.style("visibility", "hidden");
      })

      let mouseover = map.append("g")
        .attr("class", "mouseover")
        .attr("visibility", "hidden")

      let info = mouseover.append("text")
        .attr("class", "mouseover-text")
        .attr("x", 100)
        .attr("y", 100);

      function updateMouseover(d) {
        //AddressInfo = `Address: ${d["Street Address"]}`
        //info.text(AddressInfo)
        format = d3.format(",");
       //address, bedroom, bathroom, roomnum, sales, rent, lotsize, finish, year
        displayText(d["Street Address"],d["Bedrooms"],d["Bathroom"],d["Total Rooms"],format(d["Sale Amount"]),format(d["Rent Amount"]),format(d["Lot Size (Sq.Ft.)"]),
        format(d["Finished Size (Sq.Ft.)"]), d["Year Built"]);
      }

      
    }

    // render house on the map
    renderHouse(data);
    
  }

  drawMap();
</script>


</html>