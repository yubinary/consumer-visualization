<!DOCTYPE html>

<head>
  <link rel="shortcut icon" href="#" />
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <script src="https://d3js.org/d3.v7.min.js"></script>
  <script src="https://d3js.org/topojson.v3.min.js"></script>
  <link href="style.css" rel="stylesheet">
  <title>Consumer Visualization</title>
</head>

<body>
  <div class="flex">
    <svg id="main" height=900 width=1100></svg>
    <!-- information about the house !-->
    <div class="infobox">
      <p> Hover over circles to view details!</p>
      <p>Address: <span id="address"></span></p>
      <p>Number of bedroom(s): <span id="bedroom"></span></p>
      <p>Number of bathroom(s): <span id="bathroom"></span></p>
      <p>Total number of rooms: <span id="roomnum"></span></p>
      <p>Sales Amount: <span id="salesamount"></span></p>
      <p>Rent Amount: <span id="rentamount"></span></p>
      <p>Lot size: <span id="lotsize"></span></p>
      <p>Finished size: <span id="finishedsize"></span></p>
      <p>Year built: <span id="year"></span></p>
    </div>
    <div class="formDiv">
      <form id="form">
        <div class="form-field">
          <h3>Category</h3>
          <input type="checkbox" id="single" name="category" value="SingleFamily">Single
          <input type="checkbox" id="multiple" name="category" value="MultiFamily2To4">Multiple
          <input type="checkbox" id="townhouse" name="category" value="Townhouse">Townhouse
          <p>
          </p>
          <input type="checkbox" id="condo" name="category" value="Condominium">Condominium
        </div>
        <div class="form-field">
          <h3>Rooms</h3>
          <p>Bedroom</p>
          <input type="radio" id="bed1" name="bedroom" value="0">0
          <input type="radio" id="bed1" name="bedroom" value="1">1
          <input type="radio" id="bed2" name="bedroom" value="2">2
          <input type="radio" id="bed3" name="bedroom" value="3">3
          <input type="radio" id="bed4" name="bedroom" value="4">4
          <input type="radio" id="bed5" name="bedroom" value="5">5+
          <p>Bathroom</p>
          <input type="radio" id="bath1" name="bathroom" value="1">1
          <input type="radio" id="bath2" name="bathroom" value="2">2
          <input type="radio" id="bath3" name="bathroom" value="3">3
          <input type="radio" id="bath4" name="bathroom" value="4">4
          <input type="radio" id="bath5" name="bathroom" value="5">5+
          <p>Total Room</p>
          <input type="text" id="minRoom" name="minRoom">
          <input type="text" id="maxRoom" name="maxRoom">
        </div>
        <div class="form-field">
          <h3>Price Range</h3>
          <input type="radio" id="sales" name="type" value="sales">For Sales
          <input type="radio" id="rent" name="type" value="rent">For Rent
          <br />
          <input type="text" id="minPrice" name="minPrice">
          <input type="text" id="maxPrice" name="maxPrice">
        </div>
        <div class="form-field">
          <input type="button" id="button" value="Apply Filter">
        </div>
        <div class="form-result">
          <ul id="top-house"></ul>
        </div>
      </form>
    </div>
  </div>
</body>

<script>
  const map = d3.select("#main")
  const margins = { t: 20, r: 30, b: 20, l: 30 }
  const mapWidth = map.attr("width") - margins.l - margins.r
  const mapHeight = map.attr("height") - margins.t - margins.b
  const mainMap = map.append("g")
    .attr("transform", `translate(${margins.l},${margins.t})`)

  let drawMap = async function () {
    let data = await d3.csv("./datasets/zillow_pittsburgh_csv.csv")
    console.log(data);

    let pittcounties = await d3.json("./datasets/pittsburghpaneighborhoods-.json")
    console.log(pittcounties)
    // create Penn map
    let projection = d3.geoMercator().fitSize([mapWidth, mapHeight], pittcounties);
    let path = d3.geoPath().projection(projection);
    let neighbors = mainMap.selectAll("path.county").data(pittcounties.features)
      .join("path")
      .attr("class", "county")
      .attr("d", path)
      .attr("fill", "darkgray")
      .on("click", clickedOn)

    let button = document.getElementById("button");
    button.addEventListener('click', () => {
      var category = [];
      var checkboxes = document.querySelectorAll('input[name="category"]:checked');
      for (var i = 0; i < checkboxes.length; i++) {
        category.push(checkboxes[i].value)
      }
      var bedroom = document.querySelector('input[name="bedroom"]:checked') ? document.querySelector('input[name="bedroom"]:checked').value : null;
      var bathroom = document.querySelector('input[name="bathroom"]:checked') ? document.querySelector('input[name="bathroom"]:checked').value : null;
      var minRoom = document.getElementById('minRoom').value || null;
      var maxRoom = document.getElementById('maxRoom').value || null;
      var minPrice = document.getElementById('minPrice').value || null;
      var maxPrice = document.getElementById('maxPrice').value || null;
      var type = document.querySelector('input[name="type"]:checked') ? document.querySelector('input[name="type"]:checked').value : null;

      // filter by category
      function filterByCategory(obj) {
        if (category.includes(obj["Property Type"])) {
          return true
        } else {
          return false
        }
      }

      // filter by bedroom
      function filterByBedroom(obj) {
        if ((bedroom < 5 && bedroom == parseInt(obj["Bedrooms"])) || (bedroom == 5 && 5 <= parseInt(obj["Bedrooms"]))) {
          return true
        } else {
          return false
        }
      }

      // filter by bathroom
      function filterByBathroom(obj) {
        if ((bathroom < 5 && bathroom == parseInt(obj["Bathroom"])) || (bathroom == 5 && 5 <= parseInt(obj["Bathroom"]))) {
          return true
        } else {
          return false
        }
      }

      // filter by total room
      function filterByTotalroom(obj) {
        if (minRoom <= parseInt(obj["Total Rooms"]) && parseInt(obj["Total Rooms"]) <= maxRoom) {
          return true
        } else {
          return false
        }
      }

      // filter by price
      function filterByPrice(obj) {
        if (type == "sales") {
          if (minPrice <= parseInt(obj["Sale Amount"]) && parseInt(obj["Sale Amount"]) <= maxPrice) {
            return true
          } else {
            return false
          }
        } else {
          if (minPrice <= parseInt(obj["Rent Amount"]) && parseInt(obj["Rent Amount"]) <= maxPrice) {
            return true
          } else {
            return false
          }
        }
      }

      // re-render house by filtered data
      var newData = data;
      if (category.length > 0) {
        console.log(category)
        newData = newData.filter(filterByCategory);
      }
      if (bedroom) {
        newData = newData.filter(filterByBedroom);
      }
      if (bathroom) {
        newData = newData.filter(filterByBathroom);
      }
      if (minRoom && maxRoom) {
        newData = newData.filter(filterByTotalroom);
      }
      if (minPrice && maxPrice) {
        newData = newData.filter(filterByPrice);
      }
      renderHouse(newData);

      // sort the filtered data
      // priority: Finished size (desc) > Lot size (desc) > “Year built” (desc)
      function compare(a, b) {
        return b["Finished Size (Sq.Ft.)"].localeCompare(a["Finished Size (Sq.Ft.)"], undefined, { 'numeric': true })
          || b["Lot Size (Sq.Ft.)"].localeCompare(a["Lot Size (Sq.Ft.)"], undefined, { 'numeric': true })
          || b["Year Built"] - a["Year Built"];
      }

      // display top 5 houses
      newData.sort(compare);
      let topFive = newData.slice(0, 5);
      var ul = document.getElementById('top-house');
      ul.innerHTML = "Top 5 House Suggestions:";
      for (let i = 0; i < 5; i++) {
        ul.innerHTML += '<li><p>' + topFive[i]["Street Address"] + '</p></li>';
      }
    });


    // display info 
    function displayText(address, bedroom, bathroom, roomnum, sales, rent, lotsize, finish, year) {

      document.getElementById("address").innerHTML = address;
      document.getElementById("bedroom").innerHTML = bedroom;
      document.getElementById("bathroom").innerHTML = bathroom;
      document.getElementById("roomnum").innerHTML = roomnum;
      document.getElementById("salesamount").innerHTML = sales;
      document.getElementById("rentamount").innerHTML = rent;
      document.getElementById("lotsize").innerHTML = lotsize;
      document.getElementById("finishedsize").innerHTML = finish;
      document.getElementById("year").innerHTML = year;

    }
    //repeated drawing for zooming
    data.forEach((d, i) => {
      d["coords"] = projection([d['Longitude'], d["Latitude"]]);
    })
    var k = 1;
    let circles = mainMap.selectAll("circle").data(data)
      .join("circle")
      .attr("class", "circle")
      .attr("r", 6 / k)
      .attr('cx', d => d["coords"][0])
      .attr("cy", d => d["coords"][1])
      .attr("fill", "blue")
      .attr("opacity", 0.7)
    // zooming interactivity
    var zoom = d3.zoom().scaleExtent([1, 10]).on("zoom", zoomed);
    map.call(zoom);

    function zoomed(event) {
      mainMap.attr("transform", event.transform);
      neighbors.attr("stroke-width", 1 / event.transform.k)
      circles.attr("r", 6 / event.transform.k)
      k = event.transform.k
    };

    //clicking on neighborhoods to zoom
    //reference: https://observablehq.com/@d3/zoom-to-bounding-box
    function clickedOn(event, d) {
      const [[x1, y1], [x2, y2]] = path.bounds(d);
      event.stopPropagation();
      neighbors.transition().style("fill", null);
      d3.select(this).transition().style("fill", "red");
      mainMap.transition().duration(550).call(
        zoom.transform,
        d3.zoomIdentity
          .translate(mapWidth / 2, mapHeight / 2)
          .scale(Math.min(10, 0.7 / Math.max((x2 - x1) / mapWidth, (y2 - y1) / mapHeight)))
          .translate(-(x1 + x2) / 2, -(y1 + y2) / 2),
        d3.pointer(event, mainMap.node())
      );
    }

    function renderHouse(data) {
      //House data points
      data.forEach((d, i) => {
        d["coords"] = projection([d['Longitude'], d["Latitude"]]);
      })
      let circles = mainMap.selectAll("circle").data(data)
        .join("circle")
        .attr("class", "circle")
        .attr("r", 6 / k)
        .attr('cx', d => d["coords"][0])
        .attr("cy", d => d["coords"][1])
        .attr("fill", "blue")
        .attr("opacity", 0.7)

      circles.on("mouseover", function (d) {
        let circle = d3.select(this)
        console.log(this.cx)
        circle.attr("r", circle.attr("r") * 1.5)
          .attr("fill", "green")
        mouseover.style("visibility", "visible");
        updateMouseover(circle.datum());
      });

      circles.on("mouseout", function (d) {
        let circle = d3.select(this)
        circle.attr("r", circle.attr("r") / 1.5)
          .attr("fill", "blue")
        mouseover.style("visibility", "hidden");
        updateMouseout();

      })

      let mouseover = map.append("g")
        .attr("class", "mouseover")
        .attr("visibility", "hidden")

      function updateMouseover(d) {
        format = d3.format(",");
        //address, bedroom, bathroom, roomnum, sales, rent, lotsize, finish, year
        displayText(d["Street Address"], d["Bedrooms"], d["Bathroom"], d["Total Rooms"], format(d["Sale Amount"]), format(d["Rent Amount"]), format(d["Lot Size (Sq.Ft.)"]),
          format(d["Finished Size (Sq.Ft.)"]), d["Year Built"]);
      }

    // mouse out function
    function updateMouseout() {
        displayText("", "", "", "", "", "", "", "","");
      }
    }

    // render house on the map
    renderHouse(data);

    // ************ Price barchart ************ //

    // 1. set up data 
    var saleAmount = [];
    var rentAmount =[];
    var saleDict = {};

    data.forEach(d => {
      saleAmount.push(parseInt(d['Sale Amount']));
      rentAmount.push(parseInt(d['Rent Amount']));
    });
    
    saleAmount.sort((a,b)=>a-b);
    rentAmount.sort((a,b)=>a-b);

    // 2. make the dictionary of counts for the price: tick: 20 

    saleDict["38464"] = 0;
      saleDict["122062"] = 0;
      saleDict["205659"] = 0;
      saleDict["289256"] = 0;
      saleDict["372854"] = 0;
      saleDict["456451"] = 0;
      saleDict["540048"] = 0;
      saleDict["623646"] = 0;
      saleDict["707243"] = 0;
      saleDict["790840"] = 0;
      saleDict["874438"] = 0;
      saleDict["958035"] = 0;
      saleDict["1047632"] = 0;
      saleDict["1137230"] = 0;
      saleDict["1226827"] = 0;
      saleDict["1316424"] = 0;
      saleDict["1406022"] = 0;
      saleDict["1495619"] = 0;
      saleDict["1585216"] = 0;
      saleDict["1674814"] = 0;


      for (let i = 0; i < saleAmount.length; i++) {
        if (saleAmount[i] > 1674814) {
          saleDict["1674814"] += 1
        } else if (saleAmount[i] > 1674814) {
          saleDict["1585216"] += 1
        } else if (saleAmount[i] > 1585216) {
          saleDict["1495619"] += 1
        } else if (saleAmount[i] > 1495619) {
          saleDict["1406022"] += 1
        } else if (saleAmount[i] > 1406022) {
          saleDict["1316424"] += 1
        } else if (saleAmount[i] > 1316424) {
          saleDict["1226827"] += 1
        } else if (saleAmount[i] > 1226827) {
          saleDict["1137230"] += 1
        } else if (saleAmount[i] > 1137230) {
          saleDict["1047632"] += 1
        } else if (saleAmount[i] > 1047632) {
          saleDict["874438"] += 1
        } else if (saleAmount[i] > 958035) {
          saleDict["958035"] += 1
        } else if (saleAmount[i] > 874438) {
          saleDict["874438"] += 1
        } else if (saleAmount[i] > 790840) {
          saleDict["790840"] += 1
        } else if (saleAmount[i] > 707243) {
          saleDict["707243"] += 1
        } else if (saleAmount[i] > 623646) {
          saleDict["623646"] += 1
        } else if (saleAmount[i] > 540048) {
          saleDict["540048"] += 1
        } else if (saleAmount[i] > 456451) {
          saleDict["456451"] += 1
        } else if (saleAmount[i] > 372854) {
          saleDict["372854"] += 1
        } else if (saleAmount[i] > 289256) {
          saleDict["289256"] += 1
        } else if (saleAmount[i] > 205659) {
          saleDict["205659"] += 1
        } else if (saleAmount[i] > 122062) {
          saleDict["122062"] += 1
        } else if (saleAmount[i] > 38463) {
          saleDict["38464"] += 1
      }
    }


      // scale the 0 data to 10 
      for (let key in saleDict) {
        saleDict[key] += 40;
    }

    console.log(saleDict);

    // 2. set up the svg for Sales Amount bar Chart
    var svg = d3.select("svg"),
    margin = {top: 20, right: 20, bottom: 30, left: 40},
    width = +svg.attr("width") - margin.left - margin.right,
    height = +svg.attr("height") - margin.top - margin.bottom
    
    g = svg.append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    //  Define the scales for the x and y axes
    let xScale = d3.scaleBand()
                  .domain(Object.keys(saleDict))
                  .range([0, 350])
                  .padding(0);

    let yScale = d3.scaleLinear()
                  .domain([0, d3.max(Object.values(saleDict))])
                  .range([250, 0]);

  // Create the bars
    svg.selectAll('rect')
      .data(Object.entries(saleDict))
      .enter()
      .append('rect')
      .attr('x', (d) => xScale(d[0]))
      .attr('y', (d) => yScale(d[1]))
      .attr('width', xScale.bandwidth())
      .attr('height', (d) => 250 - yScale(d[1]))
      .attr('fill', 'steelblue');

  // x and y axis labels and titles
    // svg.append('g')
    // .attr('transform', 'translate(0, 250)')
    // .call(d3.axisBottom(xScale));
      
    // svg.append('g')
    //   .call(d3.axisLeft(yScale));

    svg.append('text')
      .attr('x', 200)
      .attr('y', 20)
      .attr('text-anchor', 'middle')
      .text('Price Range (Sales Amount)');

  }

  drawMap();
</script>


</html>